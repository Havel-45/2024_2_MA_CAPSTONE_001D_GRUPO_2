import { Alert, ImageBackground, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native'
import React, { useEffect, useRef, useState } from 'react'
import { useLocalSearchParams, useRouter } from 'expo-router'
import { createComment, fetchPostsDetails, removeComment, removePost } from '../../services/postService';
import { hp, wp } from '../../helpers/common';
import { theme } from '../../constants/theme';
import PostCard from '../../components/PostCard';
import { useAuth } from '../../contexts/AuthContext';
import Loading from '../../components/Loading';
import Input from '../../components/Input';
import Icon from '../../assets/icons';
import Header from '../../components/Header';
import CommentItem from '../../components/CommentItem';
import { supabase } from '../../lib/supabase';
import { getUserData } from '../../services/userService';

const PostDetails = () => {
    const {postId} = useLocalSearchParams();
    const {user} = useAuth();
    const router = useRouter();
    const [startLoading, setStartLoading] = useState(true);
    const inputRef = useRef(null);
    const commentRef = useRef('');
    const [loading, setLoading] = useState(false);


    console.log('got post Id: ', postId)

    const [post, setPost] = useState(null);

    const handleNewComment = async (payload)=>{
      console.log('Nuevo comentario', payload.new)
      if(payload.new){
          let newComment = {...payload.new};
          let res = await getUserData(newComment.userId);
          newComment.user = res.success? res.data: {};
          setPost(prevPost=>{
            return {
              ...prevPost,
              comments: [newComment, ...prevPost.comments]
            }
          })
      }
    }

    useEffect(()=>{

      let commentChannel = supabase
      .channel('comments')
      .on('postgres_changes', {
        event: 'INSERT', 
        schema: 'public', 
        table: 'comments',
        filter: `postId=eq.${postId}`
      }, handleNewComment)
      .subscribe();

      getPostDetails();

      return ()=>{
        supabase.removeChannel(commentChannel);
      }
    },[])

    const getPostDetails = async ()=>{
      let res = await fetchPostsDetails(postId);
      if(res.success) setPost (res.data);
      setStartLoading(false);

    }

    const onNewComment = async ()=>{
      if(!commentRef.current) return null;
      let data = {
        userId: user?.id,
        postId: post?.id,
        text: commentRef.current,
      }

      setLoading(true);
      let res = await createComment(data);
      setLoading(false);
      if(res.success){
          inputRef?.current?.clear();
          commentRef.current = "";
      }else{
        Alert.alert('Comentario', res.msg);
      }

    }

    const onDeleteComment = async (comment) =>{
      console.log('deleting comment: ', comment);
      let res = await removeComment(comment?.id);
      if(res.success){
          setPost(prevPost=>{
            let updatedPost = {...prevPost};
            updatedPost.comments = updatedPost.comments.filter(c=> c.id != comment.id);
            return updatedPost;
          })
      }else{
          Alert.alert('Comentario ', res.msg)
      }
  }

    const onDeletePost = async (item)=>{
      // eliminar post
      let res = await removePost(post.id);
      if(res.success){
        router.back();
      }else{
        Alert.alert('Post', res.msg);
      }

    }

    const onEditPost = async (item)=>{
      router.back();
      router.push({pathname: 'newPost', params: {...item}})
    }

    if(startLoading){
      return(
        <View style={styles.center}>
          <Loading />
        </View>
      )
    }

    if(!post){
      return (
        <View style={[styles.center, {justifyContent: 'flex-start', marginTop: 100}]}>
            <Text style={styles.notFound}>El post no ha sido encontrado!</Text>
        </View>
      )
    }
    return (
        <ImageBackground
                    source={require('../../assets/images/Home10.jpg')}
                    style={styles.backgroundImage}
                  >
        <View style={styles.container}>
        
            <View style={styles.overlay} />
        <Header title={"Detalles de la publicación"} />
        <ScrollView
        
          showsVerticalScrollIndicator={false}
          contentContainerStyle={[styles.list, { marginTop: 20}]}
        >
          <PostCard
            item={{...post, comments: [{count: post?.comments?.length}]}}
            currentUser={user}
            router={router}
            hasShadow={false}
            showMoreIcon={false}
            showDelete={true}
            onDelete={onDeletePost}
            onEdit={onEditPost}

          />
          <View style={[styles.inputContainer, {marginBottom: 20}]}>
            <Input
              inputRef={inputRef}
              placeholder="Escribir un comentario"
              onChangeText={(value) => (commentRef.current = value)}
              placeholderTextColor={theme.colors.textLight}
              containerStyle={{ flex: 1, height: hp(6.2), borderRadius: theme.radius.xl, backgroundColor: '#FFFFFF', }}
            />
            {loading ? (
              <View style={styles.loading}>
                <Loading size="small" />
              </View>
            ) : (
              <TouchableOpacity style={styles.sendIcon} onPress={onNewComment}>
                <Icon name="send" color={'white'} />
              </TouchableOpacity>
            )}
          </View>

          {/* lista de comentarios */}
          <View style={{marginVertical: 15, gap: 17}}>
            {
              post?.comments?.map(comment=>
                <CommentItem
                key={comment?.id?.toString()}
                item={comment}
                onDelete={onDeleteComment}
                canDelete = {user.id == comment.userId || user.id == post.userId || user?.type === 'mod'}
                />
              )
            }

            {
              post?.comments?.length==0 && (
                <Text style={{color: 'white', marginLeft: 5}}>
                  Sé el primero en comentar!
                </Text>
              )
            }
          </View>
        </ScrollView>
      </View>
      </ImageBackground>
      
    )
}

export default PostDetails

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'transparent',
    paddingVertical: wp(7),
  },
  backgroundImage: {
    flex: 1,
    resizeMode: 'cover',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0, 0, 0, 0.5)', // Overlay de color
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10
  },
  list: {
    paddingHorizontal: wp(4),
  },
  sendIcon: {
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 0.8,
    borderColor: 'white',
    borderRadius: theme.radius.lg,
    borderCurve: 'continuous',
    height: hp(5.8),
    width: hp(5.8),
  },
  center: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  notFound: {
    fontSize: hp(2.5),
    color: theme.colors.text,
    fontWeight: theme.fonts.medium,
  },
  loading: {
    height: hp(5.8),
    width: hp(5.8),
    justifyContent: 'center',
    alignItems: 'center',
    transform: [{scale: 1.3}]
  }

})