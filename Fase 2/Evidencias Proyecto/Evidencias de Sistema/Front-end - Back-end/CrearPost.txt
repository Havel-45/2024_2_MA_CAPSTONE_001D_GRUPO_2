import { Alert, Image, ImageBackground, Pressable, ScrollView, StyleSheet, Text, View } from 'react-native';
import React, { useEffect, useRef, useState } from 'react';
import ScreenWrapper from '../../components/ScreenWrapper';
import Header from '../../components/Header';
import { hp, wp } from '../../helpers/common';
import { theme } from '../../constants/theme';
import Avatar from '../../components/Avatar';
import { useAuth } from '../../contexts/AuthContext';
import RichTextEditor from '../../components/RichTextEditor';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { TouchableOpacity } from 'react-native';
import Icon from '../../assets/icons';
import Button from '../../components/Button';
import * as ImagePicker from 'expo-image-picker';
import { getSupaBaseFileUrl } from '../../services/imageService';
import { Video } from 'expo-av';
import { createOrUpdatePost } from '../../services/postService';

const NewPost = () => {
  const post = useLocalSearchParams();
  const { user } = useAuth();
  const bodyRef = useRef("");
  const editorRef = useRef(null);
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [file, setFile] = useState(null);
  const [gameId, setGameId] = useState(4); 

  useEffect(() => {
    if (post && post.id) {
      bodyRef.current = post.body;
      setFile(post.file || null);
      setTimeout(() => {
        editorRef?.current.setContentHTML(post.body);
      }, 300);
    }
  }, []);

  const onPick = async (isImage) => {
    let mediaConfig = {
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 0.7,
    };
    if (!isImage) {
      mediaConfig = {
        mediaTypes: ImagePicker.MediaTypeOptions.Videos,
        allowsEditing: true
      };
    }
    let result = await ImagePicker.launchImageLibraryAsync(mediaConfig);

    if (!result.canceled) {
      setFile(result.assets[0]);
    }
  };

  const isLocalFile = (file) => {
    if (!file) return null;
    if (typeof file == 'object') return true;
    return false;
  };

  const getFileType = (file) => {
    if (!file) return null;
    if (isLocalFile(file)) {
      return file.type;
    }

    if (file.includes('postImage')) {
      return 'image';
    }

    return 'video';
  };

  const getFileUri = (file) => {
    if (!file) return null;
    if (isLocalFile(file)) {
      return file.uri;
    }
    return getSupaBaseFileUrl(file)?.uri;
  };

  const onsubmit = async () => {
    if (!bodyRef.current && !file) {
      Alert.alert('Publicar', "Por favor, elige un archivo o añade el texto de la publicación");
      return;
    }

    let data = {
      file,
      body: bodyRef.current,
      userId: user?.id,
      gameId, // Agregar el gameId al objeto de datos
    };

    if (post && post.id) data.id = post.id;

    // Crear post
    setLoading(true);
    let res = await createOrUpdatePost(data);
    setLoading(false);
    if (res.success) {
      setFile(null);
      bodyRef.current = '';
      editorRef.current?.setContentHTML('');
      router.back();
    } else {
      Alert.alert('Post', res.msg);
    }
  };

  // Función para manejar la selección del juego
  const handleGameSelect = (id) => {
    setGameId(id);
  };

  return (
    <ScreenWrapper bg="white">
      <ImageBackground
        source={require('../../assets/images/Home6.jpg')}
        style={styles.backgroundImage}
      >
        <View style={styles.overlay} />

        <View style={styles.container}>
          <Header title="Crear Post" />
          <ScrollView contentContainerStyle={{ gap: 20 }}>
            {/* avatar */}
            <View style={styles.header}>
              <Avatar
                uri={user?.image}
                size={hp(6.5)}
                rounded={theme.radius.xl}
              />
              <View styles={{ gap: 2 }}>
                <Text style={styles.username}>
                  {
                    user && user.name
                  }
                </Text>
                <Text style={styles.publicText}>
                  Public
                </Text>
              </View>
            </View>

            <View style={styles.textEditor}>
              <RichTextEditor editorRef={editorRef} onChange={body => bodyRef.current = body} />
            </View>

            {
              file && (
                <View style={styles.file}>
                  {
                    getFileType(file) === 'video' ? (
                      <Video
                        style={{ flex: 1 }}
                        source={{
                          uri: getFileUri(file)
                        }}
                        useNativeControls
                        resizeMode='cover'
                        isLooping
                      />
                    ) : (
                      <Image source={{ uri: getFileUri(file) }} resizeMode='cover' style={{ flex: 1 }}
                        cachePolicy={'memory-disk'}
                      />
                    )
                  }

                  <Pressable style={styles.closeIcon} onPress={() => setFile(null)}>
                    <Icon name="delete" size={25} color="white" />
                  </Pressable>
                </View>
              )
            }

            <View style={styles.media}>
            <Text style={styles.addImageText}>Añadir al post</Text>
            <View style={styles.mediaIcons}>
              <TouchableOpacity onPress={()=> onPick(true)}>
                <Icon name="image" size={30} color={theme.colors.dark}/>
              </TouchableOpacity>
              <TouchableOpacity onPress={()=> onPick(false)}>
                <Icon name="video" size={33} color={theme.colors.dark}/>
              </TouchableOpacity>
            </View>
          </View>

            {/* Botones para seleccionar el juego */}
            <View style={styles.gameSelection}>
              <Text style={styles.username}>Selecciona el juego</Text>
              <View style={styles.gameButtons}>
                <TouchableOpacity
                  style={[styles.gameButton, { backgroundColor: gameId === 1 ? '#0083f7' : 'white' }]}
                  onPress={() => handleGameSelect(1)}
                >
                  <Text style={[styles.gameButtonText, { color: gameId === 1 ? 'white' : 'black' }]}>Dark Souls</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.gameButton, { backgroundColor: gameId === 2 ? '#A67C00' : 'white' }]}
                  onPress={() => handleGameSelect(2)}
                >
                  <Text style={[styles.gameButtonText, { color: gameId === 2 ? 'white' : 'black' }]}>Dark Souls II</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.gameButton, { backgroundColor: gameId === 3 ? '#FF4500' : 'white' }]}
                  onPress={() => handleGameSelect(3)}
                >
                  <Text style={[styles.gameButtonText, { color: gameId === 3 ? 'white' : 'black' }]}>Dark Souls III</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.gameButton, { backgroundColor: gameId === 4 ? '#BEBEBE' : 'white' }]}
                  onPress={() => handleGameSelect(4)}
                >
                  <Text style={[styles.gameButtonText, { color: gameId === 4 ? 'white' : 'black' }]}>General</Text>
                </TouchableOpacity>
              </View>
            </View>
          </ScrollView>
          <Button
            buttonStyle={{ height: hp(6.2), backgroundColor: '#FF4500' }}
            title={post && post.id ? "Actualizar" : "Publicar"}
            loading={loading}
            hasShadow={false}
            onPress={onsubmit}
          />
        </View>
      </ImageBackground>
    </ScreenWrapper>
  )
}

export default NewPost;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginBottom: 30,
    paddingHorizontal: wp(4),
    gap: 15,
  },
  backgroundImage: {
    flex: 1,
    resizeMode: 'cover',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  title: {
    fontSize: hp(2.5),
    fontWeight: theme.fonts.semibold,
    color: theme.colors.text,
    textAlign: 'center'
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  username: {
    fontSize: hp(2.2),
    fontWeight: theme.fonts.semibold,
    color: 'white',
  },
  avatar: {
    height: hp(6.5),
    width: hp(6.5),
    borderRadius: theme.radius.xl,
    borderCurve: 'continuous',
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.1)'
  },
  publicText: {
    fontSize: hp(1.7),
    fontWeight: theme.fonts.medium,
    color: theme.colors.textLight,
  },
  textEditor: {

    //

},
media: {
  flexDirection: 'row',
  justifyContent: 'space-between',
  alignItems: 'center',
  borderWidth: 1.5,
  padding: 12,
  paddingHorizontal: 18,
  borderRadius: theme.radius.xl,
  borderCurve: 'continuous',
  borderColor: theme.colors.gray,
  backgroundColor: 'white'
},
mediaIcons: {
  flexDirection: 'row',
  alignItems: 'center',
  gap: 15
},
addImageText: {
  fontSize: hp(1.9),
  fontWeight: theme.fonts.semibold,
  color: theme.colors.text,
},
imageIcon: {
  // backgroundColor: theme.colors.gray,
  borderRadius: theme.radius.md,
  // padding: 6,

},
file: {
  height: hp(30),
  width: '100%',
  borderRadius: theme.radius.xl,
  overflow: 'hidden',
  borderCurve: 'continuous'
},
closeIcon: {
  position: 'absolute',
  top: 10,
  right: 10,
  padding: 7,
  borderRadius: 50,
  backgroundColor: "black"
  // shadowColor: theme.colors.textLight,
  // shadowEffect: {width: 0, height: 3},
  // shadowOpacity: 0.6,
  // shadowRadius: 8
},
  gameSelection: {
    marginTop: 20,
  },
  gameButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  gameButton: {
    flex: 1,
    paddingVertical: 10,
    borderRadius: theme.radius.sm,
    marginHorizontal: 5,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: 'black',
  },
  gameButtonText: {
    fontSize: hp(2.2),
    fontWeight: theme.fonts.semibold,
  },
});
