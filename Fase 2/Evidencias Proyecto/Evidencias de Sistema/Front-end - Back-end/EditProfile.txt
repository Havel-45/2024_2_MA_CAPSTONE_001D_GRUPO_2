import { Alert, ImageBackground, Pressable, ScrollView, StyleSheet, Text, View } from 'react-native';
import React, { useEffect, useState } from 'react';
import ScreenWrapper from '../../components/ScreenWrapper';
import { hp, wp } from '../../helpers/common';
import { theme } from '../../constants/theme';
import Header from '../../components/Header';
import { useAuth } from '../../contexts/AuthContext';
import { getUserImageSrc, uploadFile } from '../../services/imageService';
import Icon from '../../assets/icons';
import Input from '../../components/Input';
import Button from '../../components/Button';
import { updateUser } from '../../services/userService';
import { useRouter } from 'expo-router';
import * as ImagePicker from 'expo-image-picker';
import { Image } from 'expo-image'; 


const EditProfile = () => {
  const { user: currentUser, setUserData } = useAuth();
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const [user, setUser] = useState({
    name: '',
    platform: '',
    image: 'null',
    bio: '',
  });

  useEffect(() => {
    if (currentUser) {
      setUser({
        name: currentUser.name || '',
        platform: currentUser.platform || '',
        image: currentUser.image || null,
        bio: currentUser.bio || '',
      });
    }
  }, [currentUser]);

  const onPickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],  
      quality: 0.7,
    });

    if (!result.canceled) {
      setUser({ ...user, image: result.assets[0].uri });
    }
  };

  const onSubmit = async () => {
    let userData = { ...user };
    let { name, platform, image, bio } = userData;

    if (!name || !platform || !bio) {
      Alert.alert('Perfil', "Por favor, rellena todos los campos");
      return;
    }

    setLoading(true);

    if (image && image.startsWith('file://')) {
      let imageRes = await uploadFile('profiles', image, true);
      if (imageRes.success) {
        userData.image = imageRes.data;
      }
    } else {
      userData.image = currentUser.image; // Mantener la imagen existente si no hay una nueva
    }

    const res = await updateUser(currentUser?.id, userData);
    setLoading(false);

    if (res.success) {
      setUserData({ ...currentUser, ...userData });
      router.back();
    }
  };

  let imageSource = user.image && user.image.startsWith('file://') ? { uri: user.image } : getUserImageSrc(user.image);

  return (
    <ScreenWrapper bg="white">
      <ImageBackground
            source={require('../../assets/images/Home4.jpg')}
            style={styles.backgroundImage}
          >
            <View style={styles.overlay} />
      <View style={styles.container}>
        <ScrollView style={{ flex: 1 }}>
          <Header title="Editar Perfil"/>
          
          <View style={styles.form}>
            <View style={styles.avatarContainer}>
              <Image
                source={imageSource}
                style={styles.avatar}
                contentFit="cover"
                cachePolicy={'memory-disk'}
              />
              <Pressable style={styles.cameraIcon} onPress={onPickImage}>
                <Icon name="camera" size={20} strokeWidth={2.5} />
              </Pressable>
            </View>

            <Text style={{ fontSize: hp(2), color: 'white' }}>
              Cambia tu perfil
            </Text>

            <Input
              icon={<Icon name="user" />}
              placeholder="Ingresa tu nombre"
              value={user.name}
              onChangeText={(value) => setUser({ ...user, name: value })}
              containerStyle={{backgroundColor: '#FFFFFF'}}

            />
            <Input
              icon={<Icon name="gamepad" />}
              placeholder="Plataforma en la que juegas"
              value={user.platform}
              onChangeText={(value) => setUser({ ...user, platform: value })}
              containerStyle={{backgroundColor: '#FFFFFF'}}
              

            />
            <Input
              icon={<Icon name="edit" />}
              placeholder="Introduce tu descripciÃ³n"
              value={user.bio}
              multiline={true}
              containerStyle={styles.bio}
              onChangeText={(value) => setUser({ ...user, bio: value })}
            />
          </View>
        </ScrollView>
        <Button 
            title="Actualizar"
            loading={loading} 
            onPress={onSubmit}
            buttonStyle={{marginBottom: 20, backgroundColor:'#FF4500'}} 
            hasShadow={false}/>
      </View>
      </ImageBackground>
    </ScreenWrapper>
  );
};

export default EditProfile;

const styles = StyleSheet.create({

  container: {
    flex: 1,
    paddingHorizontal: wp(4),
  },
  backgroundImage: {
    flex: 1,
    resizeMode: 'cover',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0, 0, 0, 0.5)', 
  },
  avatarContainer: {
    height: hp(14), 
    width: hp(14), 
    alignSelf: 'center',
  },
  avatar: {
    width: '100%',
    height: '100%',
    borderRadius: theme.radius.xxl * 1.8,
    borderWidth: 1,
    borderColor: theme.colors.darkLight,
  },
  cameraIcon: {
    position: 'absolute',
    bottom: 0,
    right: -10,
    padding: 8,
    borderRadius: 50,
    backgroundColor: 'white',
    shadowColor: theme.colors.textLight,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.4,
    shadowRadius: 5,
    elevation: 7,
  },
  form: {
    gap: 18,
    marginTop: 20,
  },
  bio: {
    flexDirection: 'row',
    height: hp(15),
    alignItems: 'flex-start',
    paddingVertical: 15,
    backgroundColor: 'white'
  },
});
