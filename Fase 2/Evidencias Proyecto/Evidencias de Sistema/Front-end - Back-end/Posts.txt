import { Alert, Share, StyleSheet, Text, View, Modal} from 'react-native'
import React, { useEffect, useState } from 'react'
import { theme } from '../constants/theme'
import { hp, stripHtmlTags, wp } from '../helpers/common'
import Avatar from './Avatar'
import moment from 'moment'
import { TouchableOpacity } from 'react-native'
import Icon from '../assets/icons'
import RenderHtml from 'react-native-render-html';
import { Image } from 'expo-image'
import { downloadFile, getSupaBaseFileUrl } from '../services/imageService'
import { Video } from 'expo-av'
import { createPostLike, removePostLike, updatePostCategory } from '../services/postService'
import Loading from './Loading'


const textStyle = {
    color: theme.colors.dark,
    fontSize: hp(1.75),
}
const tagsStyles = {
    div: textStyle,
    p: textStyle,
    ol: textStyle,
    h1: {
        color: theme.colors.dark
    },
    h4: {
        color: theme.colors.dark
    }
}

const PostCard = ({
    item,
    currentUser,
    router,
    hasShadow = true,
    showMoreIcon = true,
    showDelete = false,
    onDelete=()=>{},
    onEdit=()=>{}
}) => {
    if (!item) {
        return null; // No renderizar si no hay item
    }

    const shadowStyles = {
        shadowOffset: {
            width: 0,
            height: 2
        },
        shadowOpacity: 0.06,
        shadowRadius: 6,
        elevation: 1
    }

    const [likes, setLikes] = useState([]);
    const [loading, setLoading] = useState(false);
    const [isModalVisible, setModalVisible] = useState(false); // Estado para el modal
    const [selectedCategory, setSelectedCategory] = useState(null); // Estado para categoría seleccionada


    // Cargar likes del post en el estado
    useEffect(() => {
        setLikes(item?.postLikes || []); // Asegura que sea un array aunque postLikes sea undefined
    }, [item?.postLikes]);

    const openPostDetails = () => {
        if(!showMoreIcon) return null;
        router.push({pathname: 'postDetails', params: {postId: item?.id}})
    }

    const onLike = async () => {
        if (liked) {
            // remover el like
            let updatedLikes = likes.filter(like => like.userId !== currentUser?.id);
            setLikes([...updatedLikes]);
            let res = await removePostLike(item?.id, currentUser?.id);
            if (!res.success) {
                Alert.alert('Post', 'Algo ha ido mal!');
            }
        } else {
            // agregar el like
            let data = {
                userId: currentUser?.id,
                postId: item?.id
            }
            setLikes([...likes, data]);
            let res = await createPostLike(data);
            if (!res.success) {
                Alert.alert('Post', 'Algo ha ido mal!');
            }
        }
    }

    const categorizePost = () => {
        setModalVisible(true); // Abre el modal al pulsar el botón Categorizar
    };

    const assignCategory = async (postId, category) => {
        try {
            // Llama al servicio para actualizar la categoría
            const res = await updatePostCategory(postId, category); 
            if (res.success) {
                Alert.alert("Categoría asignada", `El post ha sido categorizado como ${category}`);
            } else {
                Alert.alert("Error", "No se pudo asignar la categoría.");
            }
        } catch (error) {
            console.error("Error asignando categoría:", error);
            Alert.alert("Error", "Hubo un problema al asignar la categoría.");
        }
    }

    const onSelectCategory = (category) => {
        setModalVisible(false); // Cierra el modal
        assignCategory(item.id, category); // Asigna la categoría
    };

    const onShare = async () => {
        try {
            let content = { message: stripHtmlTags(item?.body) };
            if (item?.file) {
                setLoading(true);
                const fileUrl = getSupaBaseFileUrl(item?.file);
                let localUri = await downloadFile(fileUrl?.uri);
                setLoading(false);
                if (localUri) {
                    content.url = localUri;
                }
            }
            Share.share(content);
        } catch (error) {
            console.error('Error during sharing:', error);
        }
    }

    const handlePostDelete = ()=>{
        Alert.alert('Eliminar', "Estás seguro de que quieres eliminar el post?", [
            {
                text: 'Cancelar',
                onPress: ()=> console.log('modal cancelled'),
                style: 'cancel',
            },
            {
                text: 'Eliminar',
                onPress: ()=> onDelete(item),
                style: 'destructive',
            }
          ])
    }

    const getCategoryText = (gameId) => {
        switch (gameId) {
            case 1:
                return 'Dark Souls';
            case 2:
                return 'Dark Souls 2';
            case 3:
                return 'Dark Souls 3';
            case 4:
                return 'General';
            default:
                return 'General'; 
        }
    };
    

    const createdAt = moment(item?.created_at).format('MMM D');
    const liked = likes?.length > 0 && likes.filter(like => like.userId === currentUser?.id)[0] ? true : false;

    return (
        <View style={[styles.container, hasShadow && shadowStyles]}>
            
            {/* Modal para elegir la categoría */}
            <Modal
                transparent={true}
                visible={isModalVisible}
                animationType="slide"
                onRequestClose={() => setModalVisible(false)}
            >
                <View style={styles.modalBackground}>
                    <View style={styles.modalContainer}>
                        <Text style={styles.modalTitle}>Selecciona una categoría</Text>
                        {["Lore", "Guías y Trucos", "Teorías", "Debates", "Noticias", "Builds", "Mods", "Eventos Especiales"].map((category) => (
                            <TouchableOpacity key={category} onPress={() => onSelectCategory(category)}>
                                <Text style={styles.categoryOption}>{category}</Text>
                            </TouchableOpacity>
                        ))}
                        <TouchableOpacity onPress={() => setModalVisible(false)}>
                            <Text style={styles.cancelOption}>Cancelar</Text>
                        </TouchableOpacity>
                    </View>
                </View>
            </Modal>
    
            <View style={styles.header}>
                <View style={styles.userInfo}>
                    <Avatar
                        size={hp(4.5)}
                        uri={item?.user?.image}
                        rounded={theme.radius.md}
                    />
                    <View style={{ gap: 2 }}>
                        <Text style={styles.username}>{item?.user?.name || 'Usuario Desconocido'}</Text>
                        <Text style={styles.postTime}>{createdAt}</Text>
                    </View>
                </View>
    
                {currentUser?.type === 'mod' && (
                    <TouchableOpacity onPress={categorizePost}>
                        <Text style={styles.moderatorButton}>Categorizar</Text>
                    </TouchableOpacity>
                )}
            </View>
    
            {showDelete && (currentUser.id === item?.userId || currentUser?.type === 'mod') && (
                <View style={styles.actions}>
                    <TouchableOpacity onPress={() => onEdit(item)}>
                        <Icon name="edit" size={hp(2.5)} strokeWidth={3} color={theme.colors.text} />
                    </TouchableOpacity>
                    <TouchableOpacity onPress={handlePostDelete}>
                        <Icon name="delete" size={hp(2.5)} strokeWidth={3} color={theme.colors.rose} />
                    </TouchableOpacity>
                </View>
            )}
    
            <View style={styles.content}>
                <View style={styles.postBody}>
                    {item?.body && (
                        <RenderHtml
                            contentWidth={wp(100)}
                            source={{ html: item?.body }}
                            tagsStyles={tagsStyles}
                        />
                    )}
                </View>
    
                {item?.file && item?.file?.includes('postImages') && (
                    <Image
                        source={getSupaBaseFileUrl(item?.file)}
                        transition={100}
                        style={styles.postMedia}
                        contentFit="cover"
                        cachePolicy={'memory-disk'}
                    />
                )}
    
                {item?.file && item?.file?.includes('postVideos') && (
                    <Video
                        style={[styles.postMedia, { height: hp(30) }]}
                        source={getSupaBaseFileUrl(item?.file)}
                        useNativeControls
                        resizeMode="cover"
                        isLooping
                    />
                )}
            </View>
    
            <View style={styles.footer}>
                <View style={styles.footerButton}>
                    <TouchableOpacity onPress={onLike}>
                        <Icon name="heart" size={24} fill={liked ? theme.colors.rose : 'transparent'} color={liked ? theme.colors.rose : theme.colors.textLight} />
                    </TouchableOpacity>
                    <Text style={styles.count}>{likes?.length}</Text>
                </View>
    
                <View style={styles.footerButton}>
                    <TouchableOpacity onPress={openPostDetails}>
                        <Icon name="comment" size={24} color={theme.colors.textLight} />
                    </TouchableOpacity>
                    <Text style={styles.count}>
                        {item?.comments?.length ? item.comments[0]?.count : 0}
                    </Text>
                </View>
    
                <View style={styles.footerButton}>
                    {loading ? (
                        <Loading size="small" />
                    ) : (
                        <TouchableOpacity onPress={onShare}>
                            <Icon name="share" size={24} color={theme.colors.textLight} />
                        </TouchableOpacity>
                    )}
                </View>
    
                <View style={styles.categoryContainer}>
                    <Text style={styles.categoryText}>{getCategoryText(item?.gameId)}</Text>
                </View>
            </View>
        </View>
    )
}


export default PostCard;

const styles = StyleSheet.create({
    container: {
        gap: 10,
        marginBottom: 15,
        borderRadius: theme.radius.xxl * 1.1,
        borderCurve: 'continuous',
        padding: 10,
        paddingVertical: 12,
        backgroundColor: 'white',
        borderWidth: 0.5,
        borderColor: theme.colors.gray,
        shadowColor: '#000',
    },
    header: {
        flexDirection: 'row',
        justifyContent: 'space-between'
    },
    userInfo: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 8
    },
    username: {
        fontSize: hp(1.7),
        color: theme.colors.textDark,
        fontWeight: theme.fonts.medium
    },
    postTime: {
        fontSize: hp(1.4),
        color: theme.colors.textLight,
        fontWeight: theme.fonts.medium,
    },
    content: {
        gap: 10,
    },
    postMedia: {
        height: hp(40),
        width: '100%',
        borderRadius: theme.radius.xl,
        borderCurve: 'continuous'
    },
    postBody: {
        marginLeft: 5,
    },
    footer: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 15,
        paddingHorizontal: 10, // Espacio a los lados
    },
    
    footerButton: {
        marginLeft: 5,
        flexDirection: 'row',
        alignItems: 'center',
        gap: 4
    },
    actions: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 18,
    },
    count: {
        color: theme.colors.text,
        fontSize: hp(1.8),
    },
    categoryText: {
        fontSize: hp(1.6),
        color: theme.colors.text,
        marginLeft: 10, // Para dar un poco de espacio entre el botón y el texto
        alignSelf: 'flex-end', // Para alinear el texto a la derecha
    },
    categoryContainer: {
        flex: 1, // Permite que el contenedor ocupe el espacio restante
        alignItems: 'flex-end', // Alinea el texto a la derecha
    },
    moderatorButton: {
        color: theme.colors.primary,
        fontSize: hp(1.7),
        fontWeight: 'bold',
        marginLeft: 10,
    },
    modalBackground: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(0, 0, 0, 0.5)'
    },
    modalContainer: {
        width: '80%',
        padding: 20,
        backgroundColor: 'white',
        borderRadius: 10,
        alignItems: 'center'
    },
    modalTitle: {
        fontSize: hp(2),
        fontWeight: 'bold',
        marginBottom: 10
    },
    categoryOption: {
        fontSize: hp(2),
        paddingVertical: 10,
        color: theme.colors.dark
    },
    cancelOption: {
        fontSize: hp(2),
        paddingVertical: 10,
        color: theme.colors.rose
    },
    moderatorButton: {
        color: theme.colors.primary,
        fontSize: hp(1.7),
        fontWeight: 'bold',
        marginLeft: 10
    }

});
